-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.admin_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_owner_id uuid NOT NULL,
  session_token text NOT NULL UNIQUE,
  required_for text NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  admin_id uuid,
  last_activity timestamp with time zone DEFAULT now(),
  ip_address inet,
  user_agent text,
  CONSTRAINT admin_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT admin_sessions_business_owner_id_fkey FOREIGN KEY (business_owner_id) REFERENCES public.business_owner(id),
  CONSTRAINT admin_sessions_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES auth.users(id)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admin_id uuid,
  staff_id uuid,
  business_id uuid,
  action text NOT NULL,
  target_type text,
  target_id uuid,
  details jsonb,
  reason text,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES auth.users(id),
  CONSTRAINT audit_logs_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT audit_logs_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.business_owner (
  id uuid NOT NULL,
  email character varying NOT NULL,
  first_name text,
  last_name text,
  business_name text,
  business_number text,
  address jsonb,
  profile_image_url text,
  business_type text,
  username text,
  description text,
  facebook_url text,
  instagram_url text,
  x_url text,
  cover_image_url text,
  phoneNumber text,
  account_type text,
  email_verified boolean DEFAULT false,
  phone_verified boolean DEFAULT false,
  bvn text UNIQUE CHECK (char_length(bvn) = 11),
  bvn_verified boolean DEFAULT false,
  identity_type text,
  identity_number text,
  identity_image_url text,
  identity_verified boolean DEFAULT false,
  maplerad_customer_id text,
  admin_pin_hash text,
  rc_number text,
  incorporation_date text,
  director_bvn text,
  corporate_verified boolean DEFAULT false,
  vfd_corporate_account_number text UNIQUE,
  vfd_corporate_account_name text,
  vfd_corporate_customer_id text,
  corporate_wallet_status text DEFAULT 'uninitialized'::text CHECK (corporate_wallet_status = ANY (ARRAY['uninitialized'::text, 'pending_verification'::text, 'verified'::text, 'active'::text, 'suspended'::text])),
  squadco_verified boolean DEFAULT false,
  squadco_customer_identifier character varying UNIQUE,
  squadco_virtual_account_number character varying UNIQUE,
  squadco_bank_code character varying,
  squadco_beneficiary_account character varying,
  date_of_birth date,
  wallet_status text DEFAULT 'uninitialized'::text CHECK (wallet_status = ANY (ARRAY['uninitialized'::text, 'pending_pin_setup'::text, 'pending_create_virtual_account'::text, 'active'::text, 'suspended'::text])),
  CONSTRAINT business_owner_pkey PRIMARY KEY (id),
  CONSTRAINT business_owner_duplicate_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.business_wallet_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_wallet_id uuid NOT NULL,
  business_id uuid NOT NULL,
  amount numeric NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['credit'::text, 'debit'::text, 'transfer_in'::text, 'transfer_out'::text, 'payment'::text, 'refund'::text, 'withdrawal'::text, 'deposit'::text, 'service_charge'::text])),
  description text,
  status text NOT NULL DEFAULT 'completed'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'cancelled'::text, 'reversed'::text])),
  reference text UNIQUE,
  order_id uuid,
  vfd_transaction_id text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT business_wallet_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT business_wallet_transactions_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT business_wallet_transactions_business_wallet_id_fkey FOREIGN KEY (business_wallet_id) REFERENCES public.business_wallets(id),
  CONSTRAINT business_wallet_transactions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.business_wallets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL UNIQUE,
  vfd_account_number text UNIQUE,
  vfd_account_name text,
  vfd_customer_id text,
  available_balance numeric DEFAULT 0,
  ledger_balance numeric DEFAULT 0,
  currency text NOT NULL DEFAULT 'NGN'::text,
  wallet_status text NOT NULL DEFAULT 'uninitialized'::text CHECK (wallet_status = ANY (ARRAY['uninitialized'::text, 'pending_verification'::text, 'verified'::text, 'active'::text, 'suspended'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT business_wallets_pkey PRIMARY KEY (id),
  CONSTRAINT business_wallets_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.cart (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  restaurant_id uuid,
  items jsonb NOT NULL,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'ordered'::text, 'expired'::text])),
  expires_at timestamp without time zone DEFAULT (now() + '02:00:00'::interval),
  anonymous_token uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  total smallint,
  dining_option text CHECK (dining_option = ANY (ARRAY['indoor'::text, 'delivery'::text])),
  table_id uuid,
  takeaway_packs smallint DEFAULT 0,
  takeaway_pack_price integer DEFAULT 0,
  delivery_method text DEFAULT 'pickup'::text CHECK (delivery_method = ANY (ARRAY['pickup'::text, 'rider'::text])),
  rider_name text,
  rider_phone text,
  CONSTRAINT cart_pkey PRIMARY KEY (id),
  CONSTRAINT cart_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.tables(id),
  CONSTRAINT cart_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.personal_users(id),
  CONSTRAINT cart_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.comments (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  post_id bigint NOT NULL,
  user_id uuid NOT NULL,
  content text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT comments_pkey PRIMARY KEY (id),
  CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id),
  CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.customers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  first_name text NOT NULL,
  last_name text NOT NULL,
  email text,
  phone_number text NOT NULL,
  address text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT customers_pkey PRIMARY KEY (id),
  CONSTRAINT customers_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.delivery_locations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid,
  name text NOT NULL,
  price integer NOT NULL,
  state text,
  CONSTRAINT delivery_locations_pkey PRIMARY KEY (id),
  CONSTRAINT delivery_locations_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.inventory_adjustment_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  adjustment_id uuid NOT NULL,
  item_id uuid NOT NULL,
  quantity_adjusted numeric NOT NULL,
  unit_cost numeric DEFAULT 0,
  total_value numeric DEFAULT 0,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_adjustment_items_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_adjustment_items_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.inventory_items(id),
  CONSTRAINT inventory_adjustment_items_adjustment_id_fkey FOREIGN KEY (adjustment_id) REFERENCES public.inventory_adjustments(id)
);
CREATE TABLE public.inventory_adjustments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  adjustment_type text NOT NULL CHECK (adjustment_type = ANY (ARRAY['count'::text, 'damage'::text, 'waste'::text, 'theft'::text, 'quality_control'::text, 'other'::text])),
  reason text NOT NULL,
  adjustment_date timestamp with time zone DEFAULT now(),
  total_value numeric DEFAULT 0,
  notes text,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_adjustments_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_adjustments_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.staff(id),
  CONSTRAINT inventory_adjustments_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.inventory_alerts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  item_id uuid NOT NULL,
  alert_type text NOT NULL CHECK (alert_type = ANY (ARRAY['low_stock'::text, 'out_of_stock'::text, 'expiring_soon'::text, 'expired'::text, 'overstock'::text, 'price_change'::text])),
  severity text NOT NULL CHECK (severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  message text NOT NULL,
  is_resolved boolean DEFAULT false,
  resolved_by uuid,
  resolved_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_alerts_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_alerts_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.inventory_items(id),
  CONSTRAINT inventory_alerts_resolved_by_fkey FOREIGN KEY (resolved_by) REFERENCES public.staff(id),
  CONSTRAINT inventory_alerts_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.inventory_categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  parent_category_id uuid,
  category_type text NOT NULL CHECK (category_type = ANY (ARRAY['food'::text, 'beverage'::text, 'supplies'::text, 'equipment'::text, 'cleaning'::text, 'other'::text])),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_categories_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_categories_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT inventory_categories_parent_category_id_fkey FOREIGN KEY (parent_category_id) REFERENCES public.inventory_categories(id)
);
CREATE TABLE public.inventory_count_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  count_session_id uuid NOT NULL,
  item_id uuid NOT NULL,
  expected_quantity numeric NOT NULL,
  actual_quantity numeric,
  variance numeric,
  variance_percentage numeric,
  notes text,
  counted_by uuid,
  counted_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_count_items_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_count_items_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.inventory_items(id),
  CONSTRAINT inventory_count_items_counted_by_fkey FOREIGN KEY (counted_by) REFERENCES public.staff(id),
  CONSTRAINT inventory_count_items_count_session_id_fkey FOREIGN KEY (count_session_id) REFERENCES public.inventory_count_sessions(id)
);
CREATE TABLE public.inventory_count_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  session_name text NOT NULL,
  count_type text NOT NULL CHECK (count_type = ANY (ARRAY['full'::text, 'partial'::text, 'cycle'::text])),
  status text NOT NULL DEFAULT 'in_progress'::text CHECK (status = ANY (ARRAY['planned'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text])),
  start_date timestamp with time zone DEFAULT now(),
  end_date timestamp with time zone,
  notes text,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_count_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_count_sessions_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.staff(id),
  CONSTRAINT inventory_count_sessions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.inventory_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  category_id uuid,
  supplier_id uuid,
  name text NOT NULL,
  description text,
  sku text UNIQUE,
  barcode text,
  unit_of_measure text NOT NULL CHECK (unit_of_measure = ANY (ARRAY['pieces'::text, 'kg'::text, 'grams'::text, 'liters'::text, 'ml'::text, 'boxes'::text, 'bottles'::text, 'cans'::text, 'bags'::text, 'packs'::text, 'units'::text])),
  current_stock numeric DEFAULT 0,
  minimum_stock numeric DEFAULT 0,
  maximum_stock numeric DEFAULT 0,
  reorder_point numeric DEFAULT 0,
  reorder_quantity numeric DEFAULT 0,
  unit_cost numeric DEFAULT 0,
  selling_price numeric DEFAULT 0,
  cost_per_unit numeric DEFAULT 0,
  expiry_date date,
  location text,
  is_perishable boolean DEFAULT false,
  is_alcoholic boolean DEFAULT false,
  is_ingredient boolean DEFAULT false,
  is_available boolean DEFAULT true,
  image_url text,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_items_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_items_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.inventory_categories(id),
  CONSTRAINT inventory_items_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
  CONSTRAINT inventory_items_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.inventory_reports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  report_type text NOT NULL CHECK (report_type = ANY (ARRAY['stock_level'::text, 'movement'::text, 'valuation'::text, 'usage'::text, 'expiry'::text, 'custom'::text])),
  report_name text NOT NULL,
  report_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  generated_by uuid NOT NULL,
  generated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_reports_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_reports_generated_by_fkey FOREIGN KEY (generated_by) REFERENCES public.staff(id),
  CONSTRAINT inventory_reports_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.inventory_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  item_id uuid NOT NULL,
  transaction_type text NOT NULL CHECK (transaction_type = ANY (ARRAY['purchase'::text, 'sale'::text, 'adjustment'::text, 'waste'::text, 'transfer_in'::text, 'transfer_out'::text, 'return'::text, 'damage'::text, 'expiry'::text])),
  quantity numeric NOT NULL,
  unit_cost numeric DEFAULT 0,
  total_cost numeric DEFAULT 0,
  previous_stock numeric NOT NULL,
  new_stock numeric NOT NULL,
  reference_number text,
  supplier_id uuid,
  order_id uuid,
  staff_id uuid,
  notes text,
  transaction_date timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT inventory_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_transactions_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT inventory_transactions_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
  CONSTRAINT inventory_transactions_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT inventory_transactions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT inventory_transactions_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.inventory_items(id)
);
CREATE TABLE public.likes (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  post_id bigint NOT NULL,
  user_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT likes_pkey PRIMARY KEY (id),
  CONSTRAINT likes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT likes_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id)
);
CREATE TABLE public.menu (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  owner_id uuid,
  menu_name text NOT NULL,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT menu_pkey PRIMARY KEY (id),
  CONSTRAINT menu_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.menu_item_ingredients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  menu_item_id integer NOT NULL,
  inventory_item_id uuid NOT NULL,
  quantity_required numeric NOT NULL,
  unit_of_measure text NOT NULL,
  is_optional boolean DEFAULT false,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT menu_item_ingredients_pkey PRIMARY KEY (id),
  CONSTRAINT menu_item_ingredients_inventory_item_id_fkey FOREIGN KEY (inventory_item_id) REFERENCES public.inventory_items(id),
  CONSTRAINT menu_item_ingredients_menu_item_id_fkey FOREIGN KEY (menu_item_id) REFERENCES public.menu_items(id)
);
CREATE TABLE public.menu_items (
  id integer NOT NULL DEFAULT nextval('menu_items_id_seq'::regclass),
  menu_id uuid,
  name text NOT NULL,
  description text,
  price numeric NOT NULL,
  image_url text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  profile_image_url text DEFAULT ''::text,
  status character varying DEFAULT 'available'::character varying,
  CONSTRAINT menu_items_pkey PRIMARY KEY (id),
  CONSTRAINT menu_items_menu_id_fkey FOREIGN KEY (menu_id) REFERENCES public.menu(id)
);
CREATE TABLE public.order_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL,
  menu_item_id integer NOT NULL,
  menu_item_name text NOT NULL,
  menu_item_price integer NOT NULL,
  quantity integer NOT NULL,
  total_price integer NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT order_items_pkey PRIMARY KEY (id),
  CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT order_items_menu_item_id_fkey FOREIGN KEY (menu_item_id) REFERENCES public.menu_items(id)
);
CREATE TABLE public.orders (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  customer_id uuid,
  invoice_no text NOT NULL UNIQUE,
  order_time timestamp with time zone DEFAULT now(),
  dining_option text NOT NULL CHECK (dining_option = ANY (ARRAY['indoor'::text, 'delivery'::text])),
  table_id uuid,
  takeaway_packs integer DEFAULT 0,
  takeaway_pack_price integer DEFAULT 0,
  delivery_location_id uuid,
  delivery_fee integer DEFAULT 0,
  rider_name text,
  rider_phone text,
  customer_name text NOT NULL,
  customer_phone text NOT NULL,
  customer_address text,
  subtotal integer NOT NULL,
  vat_amount integer NOT NULL,
  service_charge integer NOT NULL,
  total_amount integer NOT NULL,
  payment_method text NOT NULL CHECK (payment_method = ANY (ARRAY['cash'::text, 'wallet'::text, 'card'::text])),
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'processing'::text, 'delivered'::text, 'cancelled'::text])),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  wallet_payment_reference text,
  wallet_payment_status text DEFAULT 'pending'::text CHECK (wallet_payment_status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'cancelled'::text])),
  service_charge_amount integer DEFAULT 0,
  squadco_payment_reference character varying UNIQUE,
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT orders_delivery_location_id_fkey FOREIGN KEY (delivery_location_id) REFERENCES public.delivery_locations(id),
  CONSTRAINT orders_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.tables(id),
  CONSTRAINT orders_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id),
  CONSTRAINT orders_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL,
  amount integer NOT NULL,
  payment_method text NOT NULL,
  transaction_id text,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'refunded'::text])),
  payment_time timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payments_pkey PRIMARY KEY (id),
  CONSTRAINT payments_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id)
);
CREATE TABLE public.personal_users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email character varying NOT NULL UNIQUE,
  username character varying UNIQUE,
  first_name text,
  phoneNumber text,
  profile_image_url text,
  date_of_birth date,
  gender character varying,
  bio text,
  preferences jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  last_login_at timestamp without time zone,
  recovery_email character varying,
  two_factor_enabled boolean DEFAULT false,
  verification_token character varying,
  country character varying,
  time_zone character varying,
  referrer character varying,
  custom_fields jsonb,
  account_type text,
  address jsonb,
  cover_image_url text,
  description text,
  facebook_url text,
  instagram_url text,
  x_url text,
  last_name text,
  email_verified boolean DEFAULT false,
  phone_verified boolean DEFAULT false,
  bvn text UNIQUE CHECK (char_length(bvn) = 11),
  bvn_verified boolean DEFAULT false,
  identity_type text,
  identity_number text,
  identity_image_url text,
  identity_verified boolean DEFAULT false,
  maplerad_customer_id text,
  squadco_verified boolean DEFAULT false,
  squadco_customer_identifier character varying UNIQUE,
  squadco_virtual_account_number character varying UNIQUE,
  squadco_bank_code character varying,
  squadco_beneficiary_account character varying,
  wallet_status text DEFAULT 'uninitialized'::text CHECK (wallet_status = ANY (ARRAY['uninitialized'::text, 'pending_pin_setup'::text, 'pending_create_virtual_account'::text, 'active'::text, 'suspended'::text])),
  CONSTRAINT personal_users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.post_media (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  post_id bigint NOT NULL,
  media_url text NOT NULL,
  media_type text,
  uploaded_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT post_media_pkey PRIMARY KEY (id),
  CONSTRAINT post_media_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id)
);
CREATE TABLE public.posts (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  user_id uuid NOT NULL,
  title text NOT NULL,
  content text,
  content_type text NOT NULL,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  likes smallint,
  CONSTRAINT posts_pkey PRIMARY KEY (id),
  CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  username text,
  email text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.purchase_order_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  purchase_order_id uuid NOT NULL,
  item_id uuid NOT NULL,
  quantity_ordered numeric NOT NULL,
  quantity_received numeric DEFAULT 0,
  unit_cost numeric NOT NULL,
  total_cost numeric NOT NULL,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT purchase_order_items_pkey PRIMARY KEY (id),
  CONSTRAINT purchase_order_items_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.inventory_items(id),
  CONSTRAINT purchase_order_items_purchase_order_id_fkey FOREIGN KEY (purchase_order_id) REFERENCES public.purchase_orders(id)
);
CREATE TABLE public.purchase_orders (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  supplier_id uuid NOT NULL,
  po_number text NOT NULL UNIQUE,
  order_date timestamp with time zone DEFAULT now(),
  expected_delivery_date timestamp with time zone,
  delivery_date timestamp with time zone,
  status text NOT NULL DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'sent'::text, 'confirmed'::text, 'received'::text, 'cancelled'::text])),
  subtotal numeric DEFAULT 0,
  tax_amount numeric DEFAULT 0,
  shipping_cost numeric DEFAULT 0,
  total_amount numeric DEFAULT 0,
  notes text,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT purchase_orders_pkey PRIMARY KEY (id),
  CONSTRAINT purchase_orders_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT purchase_orders_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id),
  CONSTRAINT purchase_orders_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.staff(id)
);
CREATE TABLE public.rate_limits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type text NOT NULL CHECK (type = ANY (ARRAY['staff_pin'::text, 'admin_pin'::text])),
  identifier text NOT NULL,
  attempts integer NOT NULL DEFAULT 0,
  last_attempt timestamp with time zone NOT NULL DEFAULT now(),
  locked_until timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT rate_limits_pkey PRIMARY KEY (id)
);
CREATE TABLE public.reservation_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  date date NOT NULL,
  total_reservations integer DEFAULT 0,
  confirmed_reservations integer DEFAULT 0,
  cancelled_reservations integer DEFAULT 0,
  no_shows integer DEFAULT 0,
  total_revenue numeric DEFAULT 0,
  average_party_size numeric DEFAULT 0,
  peak_hours jsonb DEFAULT '{}'::jsonb,
  venue_utilization jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_analytics_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.reservation_notes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  reservation_id uuid NOT NULL,
  staff_id uuid NOT NULL,
  note_type text NOT NULL CHECK (note_type = ANY (ARRAY['general'::text, 'special_request'::text, 'allergy'::text, 'preference'::text, 'issue'::text])),
  content text NOT NULL,
  is_private boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_notes_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_notes_reservation_id_fkey FOREIGN KEY (reservation_id) REFERENCES public.reservations(id),
  CONSTRAINT reservation_notes_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.reservation_service_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  reservation_id uuid NOT NULL,
  service_id uuid NOT NULL,
  quantity integer NOT NULL DEFAULT 1,
  price numeric NOT NULL,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_service_items_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_service_items_reservation_id_fkey FOREIGN KEY (reservation_id) REFERENCES public.reservations(id),
  CONSTRAINT reservation_service_items_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.reservation_services(id)
);
CREATE TABLE public.reservation_services (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  price numeric DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_services_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_services_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.reservation_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL UNIQUE,
  advance_booking_days integer DEFAULT 30,
  cancellation_hours integer DEFAULT 24,
  confirmation_required boolean DEFAULT false,
  auto_confirm boolean DEFAULT true,
  allow_waitlist boolean DEFAULT true,
  max_party_size integer DEFAULT 20,
  min_party_size integer DEFAULT 1,
  deposit_required boolean DEFAULT false,
  deposit_percentage numeric DEFAULT 0,
  time_slot_duration integer DEFAULT 30,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_settings_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_settings_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.reservation_slots (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  venue_id uuid NOT NULL,
  day_of_week integer NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  max_reservations integer DEFAULT 1,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_slots_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_slots_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT reservation_slots_venue_id_fkey FOREIGN KEY (venue_id) REFERENCES public.reservation_venues(id)
);
CREATE TABLE public.reservation_types (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  color text DEFAULT '#3B82F6'::text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_types_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_types_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.reservation_venues (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  capacity integer NOT NULL,
  venue_type text NOT NULL CHECK (venue_type = ANY (ARRAY['table'::text, 'room'::text, 'hall'::text, 'outdoor'::text, 'private'::text, 'bar'::text])),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_venues_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_venues_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.reservation_waitlist (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  customer_name text NOT NULL,
  customer_email text,
  customer_phone text NOT NULL,
  party_size integer NOT NULL,
  preferred_date date NOT NULL,
  preferred_time time without time zone,
  special_requests text,
  status text NOT NULL DEFAULT 'waiting'::text CHECK (status = ANY (ARRAY['waiting'::text, 'contacted'::text, 'confirmed'::text, 'cancelled'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservation_waitlist_pkey PRIMARY KEY (id),
  CONSTRAINT reservation_waitlist_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.reservations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  customer_id uuid,
  venue_id uuid NOT NULL,
  reservation_type_id uuid,
  customer_name text NOT NULL,
  customer_email text,
  customer_phone text NOT NULL,
  customer_notes text,
  reservation_date date NOT NULL,
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  party_size integer NOT NULL,
  status text NOT NULL DEFAULT 'confirmed'::text CHECK (status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'seated'::text, 'completed'::text, 'cancelled'::text, 'no_show'::text])),
  source text DEFAULT 'phone'::text CHECK (source = ANY (ARRAY['phone'::text, 'online'::text, 'walk_in'::text, 'third_party'::text])),
  special_requests text,
  deposit_amount numeric DEFAULT 0,
  total_amount numeric DEFAULT 0,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reservations_pkey PRIMARY KEY (id),
  CONSTRAINT reservations_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT reservations_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(id),
  CONSTRAINT reservations_venue_id_fkey FOREIGN KEY (venue_id) REFERENCES public.reservation_venues(id),
  CONSTRAINT reservations_reservation_type_id_fkey FOREIGN KEY (reservation_type_id) REFERENCES public.reservation_types(id),
  CONSTRAINT reservations_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.staff(id)
);
CREATE TABLE public.restaurant_shifts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  admin_id uuid NOT NULL,
  shift_name text NOT NULL,
  started_at timestamp with time zone DEFAULT now(),
  ended_at timestamp with time zone,
  is_active boolean DEFAULT true,
  max_staff_sessions integer DEFAULT 50 CHECK (max_staff_sessions > 0),
  auto_end_time timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT restaurant_shifts_pkey PRIMARY KEY (id),
  CONSTRAINT restaurant_shifts_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT restaurant_shifts_admin_id_fkey FOREIGN KEY (admin_id) REFERENCES auth.users(id)
);
CREATE TABLE public.role_permission_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  role_name text NOT NULL UNIQUE,
  permissions jsonb NOT NULL DEFAULT '[]'::jsonb,
  description text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT role_permission_templates_pkey PRIMARY KEY (id)
);
CREATE TABLE public.security_audit_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  event_type text NOT NULL CHECK (event_type = ANY (ARRAY['staff_pin_failure'::text, 'staff_pin_success'::text, 'staff_pin_lockout'::text, 'admin_pin_failure'::text, 'admin_pin_success'::text, 'admin_pin_lockout'::text, 'unauthorized_access_attempt'::text, 'session_hijack_attempt'::text, 'permission_violation'::text, 'suspicious_activity'::text, 'account_lockout'::text, 'password_reset_attempt'::text, 'multiple_login_attempts'::text, 'session_expired'::text, 'forced_logout'::text])),
  severity text NOT NULL CHECK (severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  user_id uuid,
  staff_id uuid,
  ip_address inet,
  user_agent text,
  details jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT security_audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT security_audit_logs_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT security_audit_logs_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT security_audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.squadco_business_accounts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL UNIQUE,
  virtual_account_number character varying NOT NULL UNIQUE,
  customer_identifier character varying NOT NULL UNIQUE,
  bank_code character varying,
  beneficiary_account character varying,
  account_status character varying DEFAULT 'active'::character varying CHECK (account_status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT squadco_business_accounts_pkey PRIMARY KEY (id),
  CONSTRAINT squadco_business_accounts_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.squadco_customer_accounts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  customer_id uuid NOT NULL,
  business_id uuid NOT NULL,
  virtual_account_number character varying NOT NULL UNIQUE,
  customer_identifier character varying NOT NULL UNIQUE,
  bank_code character varying,
  account_status character varying DEFAULT 'active'::character varying CHECK (account_status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT squadco_customer_accounts_pkey PRIMARY KEY (id),
  CONSTRAINT squadco_customer_accounts_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.personal_users(id),
  CONSTRAINT squadco_customer_accounts_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.squadco_direct_debit_mandates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  order_id uuid NOT NULL,
  mandate_id character varying NOT NULL UNIQUE,
  mandate_reference character varying NOT NULL UNIQUE,
  amount numeric NOT NULL,
  status character varying NOT NULL DEFAULT 'initiated'::character varying CHECK (status::text = ANY (ARRAY['initiated'::character varying, 'approved'::character varying, 'ready'::character varying, 'cancelled'::character varying, 'expired'::character varying]::text[])),
  approved boolean DEFAULT false,
  ready_to_debit boolean DEFAULT false,
  last_debit_amount numeric,
  last_debit_date timestamp with time zone,
  total_debited numeric DEFAULT 0,
  approved_at timestamp with time zone,
  ready_at timestamp with time zone,
  cancelled_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT squadco_direct_debit_mandates_pkey PRIMARY KEY (id),
  CONSTRAINT squadco_direct_debit_mandates_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT squadco_direct_debit_mandates_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.personal_users(id)
);
CREATE TABLE public.squadco_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  transaction_reference character varying NOT NULL UNIQUE,
  virtual_account_number character varying NOT NULL,
  customer_identifier character varying NOT NULL,
  principal_amount numeric NOT NULL,
  settled_amount numeric NOT NULL,
  fee_charged numeric DEFAULT 0,
  transaction_date timestamp with time zone NOT NULL,
  transaction_indicator character varying NOT NULL,
  remarks text,
  currency character varying DEFAULT 'NGN'::character varying,
  channel character varying DEFAULT 'virtual-account'::character varying,
  sender_name character varying,
  version character varying,
  transaction_uuid character varying,
  encrypted_body text,
  business_id uuid,
  customer_id uuid,
  order_id uuid,
  payment_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT squadco_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT squadco_transactions_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id),
  CONSTRAINT squadco_transactions_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.payments(id),
  CONSTRAINT squadco_transactions_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.personal_users(id),
  CONSTRAINT squadco_transactions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.squadco_webhook_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  webhook_id character varying UNIQUE,
  payload jsonb NOT NULL,
  signature character varying,
  signature_valid boolean DEFAULT false,
  processed boolean DEFAULT false,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT squadco_webhook_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.staff (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  first_name text NOT NULL,
  last_name text NOT NULL,
  email text NOT NULL,
  phone_number text,
  pin_hash text NOT NULL,
  role text NOT NULL DEFAULT 'staff'::text CHECK (role = ANY (ARRAY['reception'::text, 'kitchen'::text, 'bar'::text, 'accountant'::text])),
  permissions jsonb DEFAULT '[]'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_login_at timestamp with time zone,
  profile_image_url text,
  date_of_birth date,
  address jsonb,
  emergency_contact_name text,
  emergency_contact_phone text,
  emergency_contact_relationship text,
  employment_start_date date DEFAULT CURRENT_DATE,
  employment_end_date date,
  department text,
  employee_id text UNIQUE,
  notes text,
  position text,
  failed_login_attempts integer DEFAULT 0,
  locked_until timestamp with time zone,
  last_login timestamp with time zone,
  login_count integer DEFAULT 0,
  username text,
  custom_permissions jsonb DEFAULT '[]'::jsonb,
  access_level text DEFAULT 'standard'::text CHECK (access_level = ANY (ARRAY['standard'::text, 'elevated'::text, 'admin'::text])),
  last_activity timestamp with time zone,
  session_timeout_minutes integer DEFAULT 480,
  CONSTRAINT staff_pkey PRIMARY KEY (id),
  CONSTRAINT staff_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.staff_access_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  session_id uuid,
  action text NOT NULL,
  resource_type text,
  resource_id uuid,
  permission_required text,
  access_granted boolean DEFAULT true,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_access_logs_pkey PRIMARY KEY (id),
  CONSTRAINT staff_access_logs_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_access_logs_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT staff_access_logs_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.staff_sessions(id)
);
CREATE TABLE public.staff_activity_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  staff_id uuid NOT NULL,
  session_id uuid,
  action text NOT NULL,
  performed_by uuid NOT NULL,
  details jsonb DEFAULT '{}'::jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_activity_logs_pkey PRIMARY KEY (id),
  CONSTRAINT staff_activity_logs_performed_by_fkey FOREIGN KEY (performed_by) REFERENCES auth.users(id),
  CONSTRAINT staff_activity_logs_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.staff_sessions(id),
  CONSTRAINT staff_activity_logs_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT staff_activity_logs_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.staff_attendance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  shift_id uuid,
  attendance_date date NOT NULL,
  clock_in_time timestamp with time zone,
  clock_out_time timestamp with time zone,
  total_hours_worked numeric,
  overtime_hours numeric DEFAULT 0,
  status text NOT NULL CHECK (status = ANY (ARRAY['present'::text, 'absent'::text, 'late'::text, 'early_departure'::text])),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_attendance_pkey PRIMARY KEY (id),
  CONSTRAINT staff_attendance_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_attendance_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT staff_attendance_shift_id_fkey FOREIGN KEY (shift_id) REFERENCES public.staff_shifts(id)
);
CREATE TABLE public.staff_documents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  document_type text NOT NULL CHECK (document_type = ANY (ARRAY['contract'::text, 'id_document'::text, 'tax_form'::text, 'certification'::text, 'training_record'::text, 'other'::text])),
  document_name text NOT NULL,
  file_url text NOT NULL,
  file_size integer,
  mime_type text,
  expiration_date date,
  is_required boolean DEFAULT false,
  uploaded_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_documents_pkey PRIMARY KEY (id),
  CONSTRAINT staff_documents_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES public.business_owner(id),
  CONSTRAINT staff_documents_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_documents_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.staff_performance_reviews (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  reviewer_id uuid NOT NULL,
  review_period_start date NOT NULL,
  review_period_end date NOT NULL,
  overall_rating integer CHECK (overall_rating >= 1 AND overall_rating <= 5),
  performance_metrics jsonb DEFAULT '{}'::jsonb,
  goals jsonb DEFAULT '[]'::jsonb,
  achievements jsonb DEFAULT '[]'::jsonb,
  areas_for_improvement text,
  comments text,
  status text NOT NULL DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'completed'::text, 'approved'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_performance_reviews_pkey PRIMARY KEY (id),
  CONSTRAINT staff_performance_reviews_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_performance_reviews_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT staff_performance_reviews_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.staff_permissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  permission_name text NOT NULL,
  is_granted boolean DEFAULT true,
  granted_by uuid NOT NULL,
  granted_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_permissions_pkey PRIMARY KEY (id),
  CONSTRAINT staff_permissions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_permissions_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES public.business_owner(id),
  CONSTRAINT staff_permissions_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.staff_role_assignments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  role_name text NOT NULL,
  assigned_by uuid NOT NULL,
  assigned_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_role_assignments_pkey PRIMARY KEY (id),
  CONSTRAINT staff_role_assignments_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT staff_role_assignments_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_role_assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.business_owner(id)
);
CREATE TABLE public.staff_salary (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  base_salary numeric,
  hourly_rate numeric,
  salary_type text NOT NULL CHECK (salary_type = ANY (ARRAY['hourly'::text, 'monthly'::text, 'annual'::text])),
  payment_frequency text NOT NULL CHECK (payment_frequency = ANY (ARRAY['weekly'::text, 'bi_weekly'::text, 'monthly'::text])),
  commission_rate numeric DEFAULT 0,
  bonus_eligible boolean DEFAULT false,
  effective_date date NOT NULL,
  end_date date,
  is_current boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_salary_pkey PRIMARY KEY (id),
  CONSTRAINT staff_salary_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_salary_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.staff_session_activity (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL UNIQUE,
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  page_visits integer DEFAULT 0,
  actions_performed integer DEFAULT 0,
  last_activity_at timestamp with time zone DEFAULT now(),
  idle_time_minutes integer DEFAULT 0,
  total_session_duration_minutes integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  screens_accessed jsonb DEFAULT '[]'::jsonb,
  tasks_completed jsonb DEFAULT '[]'::jsonb,
  productivity_score numeric,
  break_time_minutes integer DEFAULT 0,
  active_time_minutes integer DEFAULT 0,
  CONSTRAINT staff_session_activity_pkey PRIMARY KEY (id),
  CONSTRAINT staff_session_activity_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id),
  CONSTRAINT staff_session_activity_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.staff_sessions(id),
  CONSTRAINT staff_session_activity_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.staff_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  session_token text NOT NULL UNIQUE,
  signed_in_by uuid NOT NULL,
  signed_in_at timestamp with time zone DEFAULT now(),
  signed_out_at timestamp with time zone,
  is_active boolean DEFAULT true,
  expires_at timestamp with time zone DEFAULT (now() + '08:00:00'::interval),
  shift_id uuid,
  pin_hash text,
  last_activity timestamp with time zone DEFAULT now(),
  ip_address inet,
  device_info jsonb,
  CONSTRAINT staff_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT staff_sessions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_sessions_signed_in_by_fkey FOREIGN KEY (signed_in_by) REFERENCES public.business_owner(id),
  CONSTRAINT staff_sessions_shift_id_fkey FOREIGN KEY (shift_id) REFERENCES public.restaurant_shifts(id),
  CONSTRAINT staff_sessions_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.staff_shifts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  staff_id uuid NOT NULL,
  business_id uuid NOT NULL,
  shift_date date NOT NULL,
  scheduled_start_time time without time zone NOT NULL,
  scheduled_end_time time without time zone NOT NULL,
  actual_start_time time without time zone,
  actual_end_time time without time zone,
  break_duration_minutes integer DEFAULT 0,
  status text NOT NULL DEFAULT 'scheduled'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'in_progress'::text, 'completed'::text, 'missed'::text, 'cancelled'::text])),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_shifts_pkey PRIMARY KEY (id),
  CONSTRAINT staff_shifts_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id),
  CONSTRAINT staff_shifts_staff_id_fkey FOREIGN KEY (staff_id) REFERENCES public.staff(id)
);
CREATE TABLE public.suppliers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  contact_person text,
  email text,
  phone text,
  address text,
  tax_id text,
  payment_terms text,
  credit_limit numeric DEFAULT 0,
  current_balance numeric DEFAULT 0,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  notes text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT suppliers_pkey PRIMARY KEY (id),
  CONSTRAINT suppliers_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.tables (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  restaurant_id uuid NOT NULL,
  table_number character varying NOT NULL,
  capacity integer NOT NULL,
  status text DEFAULT 'available'::text CHECK (status = ANY (ARRAY['available'::text, 'reserved'::text, 'occupied'::text, 'inactive'::text])),
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT tables_pkey PRIMARY KEY (id),
  CONSTRAINT tables_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.takeaway_packs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  price integer NOT NULL,
  CONSTRAINT takeaway_packs_pkey PRIMARY KEY (id),
  CONSTRAINT takeaway_packs_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.user_wallets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  balance numeric NOT NULL DEFAULT 0.00,
  currency text NOT NULL DEFAULT 'NGN'::text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_wallets_pkey PRIMARY KEY (id),
  CONSTRAINT user_wallets_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.vfd_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid,
  user_id uuid,
  transaction_id text NOT NULL,
  session_id text,
  reference text NOT NULL,
  amount numeric NOT NULL,
  from_account text,
  to_account text,
  from_bank text,
  to_bank text,
  transaction_type text NOT NULL CHECK (transaction_type = ANY (ARRAY['intra'::text, 'inter'::text])),
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'reversed'::text])),
  response_code text,
  response_message text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT vfd_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT vfd_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.personal_users(id),
  CONSTRAINT vfd_transactions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.vfd_webhooks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid,
  user_id uuid,
  webhook_type text NOT NULL CHECK (webhook_type = ANY (ARRAY['inward_credit'::text, 'initial_credit'::text, 'bvn_consent'::text])),
  reference text NOT NULL,
  amount text,
  account_number text,
  originator_account_number text,
  originator_account_name text,
  originator_bank text,
  originator_narration text,
  timestamp text,
  transaction_channel text,
  session_id text,
  initial_credit_request boolean DEFAULT false,
  bvn text,
  consent_status boolean,
  webhook_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  processed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT vfd_webhooks_pkey PRIMARY KEY (id),
  CONSTRAINT vfd_webhooks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.personal_users(id),
  CONSTRAINT vfd_webhooks_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.business_owner(id)
);
CREATE TABLE public.wallet_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_id uuid NOT NULL,
  user_id uuid NOT NULL,
  amount numeric NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['credit'::text, 'debit'::text, 'transfer_in'::text, 'transfer_out'::text, 'payment'::text, 'refund'::text, 'withdrawal'::text, 'deposit'::text])),
  description text,
  status text NOT NULL DEFAULT 'completed'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'cancelled'::text, 'reversed'::text])),
  reference text UNIQUE,
  metadata jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT wallet_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT wallet_transactions_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.user_wallets(id),
  CONSTRAINT wallet_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.wallets (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid UNIQUE,
  currency text NOT NULL,
  available_balance numeric DEFAULT 0,
  ledger_balance numeric DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  wallet_status text NOT NULL DEFAULT 'uninitialized'::text,
  vfd_customer_id text UNIQUE,
  vfd_account_number text UNIQUE,
  vfd_account_name text,
  vfd_bank_code text,
  vfd_bank_name text,
  CONSTRAINT wallets_pkey PRIMARY KEY (id),
  CONSTRAINT wallets_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);